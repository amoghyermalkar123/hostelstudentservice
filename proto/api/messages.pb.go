// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/messages.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type UserKey struct {
	Key                  int64    `protobuf:"varint,1,opt,name=Key,proto3" json:"Key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserKey) Reset()         { *m = UserKey{} }
func (m *UserKey) String() string { return proto.CompactTextString(m) }
func (*UserKey) ProtoMessage()    {}
func (*UserKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_346d92f49d8efbd3, []int{0}
}

func (m *UserKey) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserKey.Unmarshal(m, b)
}
func (m *UserKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserKey.Marshal(b, m, deterministic)
}
func (m *UserKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserKey.Merge(m, src)
}
func (m *UserKey) XXX_Size() int {
	return xxx_messageInfo_UserKey.Size(m)
}
func (m *UserKey) XXX_DiscardUnknown() {
	xxx_messageInfo_UserKey.DiscardUnknown(m)
}

var xxx_messageInfo_UserKey proto.InternalMessageInfo

func (m *UserKey) GetKey() int64 {
	if m != nil {
		return m.Key
	}
	return 0
}

type ChatMessage struct {
	SenderId             int64    `protobuf:"varint,1,opt,name=senderId,proto3" json:"senderId,omitempty"`
	Text                 string   `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	Timestamp            int64    `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	ServerTimestamp      int64    `protobuf:"varint,6,opt,name=serverTimestamp,proto3" json:"serverTimestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChatMessage) Reset()         { *m = ChatMessage{} }
func (m *ChatMessage) String() string { return proto.CompactTextString(m) }
func (*ChatMessage) ProtoMessage()    {}
func (*ChatMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_346d92f49d8efbd3, []int{1}
}

func (m *ChatMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChatMessage.Unmarshal(m, b)
}
func (m *ChatMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChatMessage.Marshal(b, m, deterministic)
}
func (m *ChatMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChatMessage.Merge(m, src)
}
func (m *ChatMessage) XXX_Size() int {
	return xxx_messageInfo_ChatMessage.Size(m)
}
func (m *ChatMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ChatMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ChatMessage proto.InternalMessageInfo

func (m *ChatMessage) GetSenderId() int64 {
	if m != nil {
		return m.SenderId
	}
	return 0
}

func (m *ChatMessage) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *ChatMessage) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *ChatMessage) GetServerTimestamp() int64 {
	if m != nil {
		return m.ServerTimestamp
	}
	return 0
}

type StudentAdminMessageRequest struct {
	UserKey              *UserKey `protobuf:"bytes,1,opt,name=userKey,proto3" json:"userKey,omitempty"`
	AdminName            string   `protobuf:"bytes,2,opt,name=adminName,proto3" json:"adminName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StudentAdminMessageRequest) Reset()         { *m = StudentAdminMessageRequest{} }
func (m *StudentAdminMessageRequest) String() string { return proto.CompactTextString(m) }
func (*StudentAdminMessageRequest) ProtoMessage()    {}
func (*StudentAdminMessageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_346d92f49d8efbd3, []int{2}
}

func (m *StudentAdminMessageRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StudentAdminMessageRequest.Unmarshal(m, b)
}
func (m *StudentAdminMessageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StudentAdminMessageRequest.Marshal(b, m, deterministic)
}
func (m *StudentAdminMessageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StudentAdminMessageRequest.Merge(m, src)
}
func (m *StudentAdminMessageRequest) XXX_Size() int {
	return xxx_messageInfo_StudentAdminMessageRequest.Size(m)
}
func (m *StudentAdminMessageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StudentAdminMessageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StudentAdminMessageRequest proto.InternalMessageInfo

func (m *StudentAdminMessageRequest) GetUserKey() *UserKey {
	if m != nil {
		return m.UserKey
	}
	return nil
}

func (m *StudentAdminMessageRequest) GetAdminName() string {
	if m != nil {
		return m.AdminName
	}
	return ""
}

func init() {
	proto.RegisterType((*UserKey)(nil), "msgapi.UserKey")
	proto.RegisterType((*ChatMessage)(nil), "msgapi.ChatMessage")
	proto.RegisterType((*StudentAdminMessageRequest)(nil), "msgapi.StudentAdminMessageRequest")
}

func init() { proto.RegisterFile("proto/messages.proto", fileDescriptor_346d92f49d8efbd3) }

var fileDescriptor_346d92f49d8efbd3 = []byte{
	// 286 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x52, 0x41, 0x4f, 0xb3, 0x40,
	0x10, 0xfd, 0xf8, 0x68, 0xa8, 0x9d, 0x1e, 0x6a, 0xb6, 0x4d, 0x24, 0xe8, 0xa1, 0xd9, 0x13, 0x5e,
	0xa8, 0xc1, 0x5f, 0xa0, 0x9e, 0x4c, 0xa3, 0x07, 0x50, 0x0f, 0xde, 0x56, 0x99, 0xe0, 0x9a, 0x2c,
	0xe0, 0xee, 0xd0, 0xd8, 0x1f, 0xe0, 0xff, 0x36, 0x2c, 0xd0, 0x12, 0x53, 0x4f, 0xde, 0x66, 0xde,
	0xbc, 0x99, 0xf7, 0xde, 0x66, 0x61, 0x51, 0xe9, 0x92, 0xca, 0x95, 0x42, 0x63, 0x44, 0x8e, 0x26,
	0xb2, 0x2d, 0xf3, 0x94, 0xc9, 0x45, 0x25, 0xf9, 0x29, 0x8c, 0x1f, 0x0d, 0xea, 0x35, 0x6e, 0xd9,
	0x31, 0xb8, 0x6b, 0xdc, 0xfa, 0xce, 0xd2, 0x09, 0xdd, 0xa4, 0x29, 0xf9, 0x97, 0x03, 0xd3, 0x9b,
	0x37, 0x41, 0x77, 0xed, 0x2e, 0x0b, 0xe0, 0xc8, 0x60, 0x91, 0xa1, 0xbe, 0xcd, 0x3a, 0xda, 0xae,
	0x67, 0x0c, 0x46, 0x84, 0x9f, 0xe4, 0xff, 0x5f, 0x3a, 0xe1, 0x24, 0xb1, 0x35, 0x3b, 0x83, 0x09,
	0x49, 0x85, 0x86, 0x84, 0xaa, 0x7c, 0xd7, 0x2e, 0xec, 0x01, 0x16, 0xc2, 0xcc, 0xa0, 0xde, 0xa0,
	0x7e, 0xd8, 0x71, 0x3c, 0xcb, 0xf9, 0x09, 0x73, 0x84, 0x20, 0xa5, 0x3a, 0xc3, 0x82, 0xae, 0x32,
	0x25, 0x8b, 0xce, 0x4e, 0x82, 0x1f, 0x35, 0x1a, 0x62, 0xe7, 0x30, 0xae, 0xdb, 0x08, 0xd6, 0xd4,
	0x34, 0x9e, 0x45, 0x6d, 0xb8, 0xa8, 0x4b, 0x96, 0xf4, 0xf3, 0xc6, 0x90, 0x68, 0x2e, 0xdc, 0x0b,
	0x85, 0x9d, 0xd3, 0x3d, 0x10, 0xbf, 0xc3, 0x7c, 0x78, 0x3f, 0x45, 0xbd, 0x91, 0xaf, 0xc8, 0x52,
	0x58, 0xa8, 0xb2, 0x90, 0x54, 0xea, 0xe1, 0xd4, 0x30, 0xde, 0xcb, 0xfc, 0xee, 0x2d, 0x98, 0xf7,
	0x9c, 0xc1, 0x33, 0xf2, 0x7f, 0x17, 0x4e, 0x4c, 0x07, 0x23, 0xf5, 0x92, 0x4f, 0x70, 0x92, 0x23,
	0x1d, 0x20, 0xfc, 0x4d, 0xf5, 0xda, 0x7b, 0x1e, 0xad, 0x44, 0x25, 0x5f, 0x3c, 0xfb, 0x09, 0x2e,
	0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0xd2, 0xd7, 0xb7, 0x07, 0x1c, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AdminMessageServiceClient is the client API for AdminMessageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AdminMessageServiceClient interface {
	MonitorAdminMessages(ctx context.Context, in *StudentAdminMessageRequest, opts ...grpc.CallOption) (AdminMessageService_MonitorAdminMessagesClient, error)
}

type adminMessageServiceClient struct {
	cc *grpc.ClientConn
}

func NewAdminMessageServiceClient(cc *grpc.ClientConn) AdminMessageServiceClient {
	return &adminMessageServiceClient{cc}
}

func (c *adminMessageServiceClient) MonitorAdminMessages(ctx context.Context, in *StudentAdminMessageRequest, opts ...grpc.CallOption) (AdminMessageService_MonitorAdminMessagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AdminMessageService_serviceDesc.Streams[0], "/msgapi.AdminMessageService/monitorAdminMessages", opts...)
	if err != nil {
		return nil, err
	}
	x := &adminMessageServiceMonitorAdminMessagesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AdminMessageService_MonitorAdminMessagesClient interface {
	Recv() (*ChatMessage, error)
	grpc.ClientStream
}

type adminMessageServiceMonitorAdminMessagesClient struct {
	grpc.ClientStream
}

func (x *adminMessageServiceMonitorAdminMessagesClient) Recv() (*ChatMessage, error) {
	m := new(ChatMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AdminMessageServiceServer is the server API for AdminMessageService service.
type AdminMessageServiceServer interface {
	MonitorAdminMessages(*StudentAdminMessageRequest, AdminMessageService_MonitorAdminMessagesServer) error
}

// UnimplementedAdminMessageServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAdminMessageServiceServer struct {
}

func (*UnimplementedAdminMessageServiceServer) MonitorAdminMessages(req *StudentAdminMessageRequest, srv AdminMessageService_MonitorAdminMessagesServer) error {
	return status.Errorf(codes.Unimplemented, "method MonitorAdminMessages not implemented")
}

func RegisterAdminMessageServiceServer(s *grpc.Server, srv AdminMessageServiceServer) {
	s.RegisterService(&_AdminMessageService_serviceDesc, srv)
}

func _AdminMessageService_MonitorAdminMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StudentAdminMessageRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AdminMessageServiceServer).MonitorAdminMessages(m, &adminMessageServiceMonitorAdminMessagesServer{stream})
}

type AdminMessageService_MonitorAdminMessagesServer interface {
	Send(*ChatMessage) error
	grpc.ServerStream
}

type adminMessageServiceMonitorAdminMessagesServer struct {
	grpc.ServerStream
}

func (x *adminMessageServiceMonitorAdminMessagesServer) Send(m *ChatMessage) error {
	return x.ServerStream.SendMsg(m)
}

var _AdminMessageService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "msgapi.AdminMessageService",
	HandlerType: (*AdminMessageServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "monitorAdminMessages",
			Handler:       _AdminMessageService_MonitorAdminMessages_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/messages.proto",
}

// StudentAdminMessageServiceClient is the client API for StudentAdminMessageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StudentAdminMessageServiceClient interface {
	GetStudentAdminMessages(ctx context.Context, in *StudentAdminMessageRequest, opts ...grpc.CallOption) (StudentAdminMessageService_GetStudentAdminMessagesClient, error)
}

type studentAdminMessageServiceClient struct {
	cc *grpc.ClientConn
}

func NewStudentAdminMessageServiceClient(cc *grpc.ClientConn) StudentAdminMessageServiceClient {
	return &studentAdminMessageServiceClient{cc}
}

func (c *studentAdminMessageServiceClient) GetStudentAdminMessages(ctx context.Context, in *StudentAdminMessageRequest, opts ...grpc.CallOption) (StudentAdminMessageService_GetStudentAdminMessagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StudentAdminMessageService_serviceDesc.Streams[0], "/msgapi.StudentAdminMessageService/getStudentAdminMessages", opts...)
	if err != nil {
		return nil, err
	}
	x := &studentAdminMessageServiceGetStudentAdminMessagesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StudentAdminMessageService_GetStudentAdminMessagesClient interface {
	Recv() (*ChatMessage, error)
	grpc.ClientStream
}

type studentAdminMessageServiceGetStudentAdminMessagesClient struct {
	grpc.ClientStream
}

func (x *studentAdminMessageServiceGetStudentAdminMessagesClient) Recv() (*ChatMessage, error) {
	m := new(ChatMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StudentAdminMessageServiceServer is the server API for StudentAdminMessageService service.
type StudentAdminMessageServiceServer interface {
	GetStudentAdminMessages(*StudentAdminMessageRequest, StudentAdminMessageService_GetStudentAdminMessagesServer) error
}

// UnimplementedStudentAdminMessageServiceServer can be embedded to have forward compatible implementations.
type UnimplementedStudentAdminMessageServiceServer struct {
}

func (*UnimplementedStudentAdminMessageServiceServer) GetStudentAdminMessages(req *StudentAdminMessageRequest, srv StudentAdminMessageService_GetStudentAdminMessagesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetStudentAdminMessages not implemented")
}

func RegisterStudentAdminMessageServiceServer(s *grpc.Server, srv StudentAdminMessageServiceServer) {
	s.RegisterService(&_StudentAdminMessageService_serviceDesc, srv)
}

func _StudentAdminMessageService_GetStudentAdminMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StudentAdminMessageRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StudentAdminMessageServiceServer).GetStudentAdminMessages(m, &studentAdminMessageServiceGetStudentAdminMessagesServer{stream})
}

type StudentAdminMessageService_GetStudentAdminMessagesServer interface {
	Send(*ChatMessage) error
	grpc.ServerStream
}

type studentAdminMessageServiceGetStudentAdminMessagesServer struct {
	grpc.ServerStream
}

func (x *studentAdminMessageServiceGetStudentAdminMessagesServer) Send(m *ChatMessage) error {
	return x.ServerStream.SendMsg(m)
}

var _StudentAdminMessageService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "msgapi.StudentAdminMessageService",
	HandlerType: (*StudentAdminMessageServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "getStudentAdminMessages",
			Handler:       _StudentAdminMessageService_GetStudentAdminMessages_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/messages.proto",
}
